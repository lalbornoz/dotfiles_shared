# $Id$
# Zsh-specific prompt strings
#

_shorten_ifTooLong() {
	local _string_long="${1}";
	if [ "${#_string_long}" -gt 15 ]; then
		printf "%s.." "${_string_long:0:15}";
	else
		printf "%s" "${_string_long}";
	fi;
};

_shorten_path_ifTooLong() {
	local _path_long="$(print -Pn "%~")";
	if [ "${#_path_long}" -gt 25 ]; then
		printf "..%s" "${_path_long:$((${#_path_long} - 25))}";
	else
		printf "%s" "${_path_long}";
	fi;
};

#
# Reflect the shell status in{,as} the terminal emulators title{ bar,}
case "${TERM}" in
	#
	# N.B.	Refer to /^ *preexec/ in zshmisc(1) for the exact
	#	semantics and differences between what is passed
	#	to preexec() in the positional parameters.
[abmEwxX][tT]erm*|putty*)
		precmd()  { print -Pn "]0;%n@%m:$(_shorten_path_ifTooLong)$\a"; }
		preexec() { set -- "${2}"; print -Pn "]0;%n@%m:$(_shorten_path_ifTooLong)$ "; print -n "$(_shorten_ifTooLong "${(q)1}")\a"; }
		;;

screen*)	precmd() { print -PnR "k%n@%m:$(_shorten_path_ifTooLong)$\\"; }
		preexec() { set -- "${2}"; print -PnR "k%n@%m:$(_shorten_path_ifTooLong)$ "; print -n "$(_shorten_ifTooLong "${(q)1}")\\"; }
		;;

*)		;;
esac

PROMPT_PERCENT=yes;		# Expand '%'-prefixed escape
				# sequences in the prompt strings
PS1='%n@%m:(%2~)> %(!.#.$) ';	# Primary prompt string:
				# /<user>@<hname>:(<path>)> {#,$} /

# vim:filetype=sh
